1. 
margin属性：
【n.	边缘，范围; 极限; 利润，盈余; （版心外） 的空白;
vt.	留边; 成为…的边; 加边于，围绕; 为…加旁注;】
有 margin-top/margin-botttom/margin-left/margin-right四个属性，设置边缘距离。
2.
padding属性(和margin很像)：
1) padding: 上、右、下、左; {从上按顺时针转的}
2) 可用 padding-top、padding-bottom、padding-left、padding-right 分别表示
3) 如果 padding 属性缺失 right、bottom、left; 就都参考 top
4) 如果 padding 属性缺失 bottom、left; bottom 会参考 top, left 会参考 right
5) 区别
margin(外边距)：margin是指元素自身的边框，与另外一个元素的界面的距离。两个Div块之间的距离。
padding(内边距)：从功能上来说，padding与margin是非常像的，但是他是设置内部元素到区域框之间的距离。图片在Div中的距离。
3.
border属性：
for example----border：1px solid #000；
4.
list-style-type: none;/* 去掉li前的点 */
5.
流的概念和作用 //因为有人把Div比作流
流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。
6.Div块级元素
1) div是一种块元素，每个元素铁定会占一行，无论当前行是否已经用完了，也就是所谓的“流”的概念
2) 如果一个div块被设为浮动的话，它将脱离这个流，自主地去填充这个区域，去靠到最左边或者最右边. 比如讲2号块设为向左浮动，为了醒目，将3号块的长度变长了。
3)如果将连续的两个块设为浮动的话，他们都将和流中的上一个元素的下边沿对齐，并且靠后的那个浮动元素（假设两个浮动元素都是向左浮动的）会靠在前面那个元素的左边。如果空间不够，则会被挤向下一行。
4)
float:left;元素向左浮动

float:right;元素向右浮动

float:none;元素不浮动
7.
line-height: 50px;/*设置字体在块中的高度*/

float:inherit;元素继承于父级的浮动属性
8.
布局
布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。
2009年，W3C提出了一种新的方案----Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。
9.
flex布局：
Flex是Flexible Box的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。
1) 任何一个容器都可以指定为Flex布局。
.box{
  display: flex;
}
2) 行内元素也可以使用Flex布局。
.box{
  display: inline-flex;
}
3) Webkit内核的浏览器，必须加上-webkit前缀。
.box{
  display: -webkit-flex; /* Safari */
  display: flex;
}
4) 注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效
5) 
--flex-direction:  决定主轴的方向（即项目的排列方向）。
它可能有4个值。
 row（默认值）：主轴为水平方向，起点在左端。
 row-reverse：主轴为水平方向，起点在右端。
 column：主轴为垂直方向，起点在上沿。
 column-reverse：主轴为垂直方向，起点在下沿。
--flex-wrap:  默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。
它可能取三个值。
 nowrap（默认）：不换行。
 wrap：换行，第一行在上方。
 wrap-reverse：换行，第一行在下方。
--flex-flow: 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
--justify-content:  justify-content属性定义了项目在主轴上的对齐方式。
它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。
flex-start（默认值）：左对齐
flex-end：右对齐
center： 居中
space-between：两端对齐，项目之间的间隔都相等。
space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
--align-items:  align-items属性定义项目在交叉轴上如何对齐。
它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。
flex-start：交叉轴的起点对齐。
flex-end：交叉轴的终点对齐。
center：交叉轴的中点对齐。
baseline: 项目的第一行文字的基线对齐。
stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度
--align-content:  align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用
flex-start：与交叉轴的起点对齐。
flex-end：与交叉轴的终点对齐。
center：与交叉轴的中点对齐。
space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
stretch（默认值）：轴线占满整个交叉轴。
6)https://blog.csdn.net/u011300580/article/details/56011564






